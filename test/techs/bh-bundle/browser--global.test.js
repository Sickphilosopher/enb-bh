var fs = require('fs'),
    path = require('path'),
    mock = require('mock-fs'),
    TestNode = require('enb/lib/test/mocks/test-node'),
    FileList = require('enb/lib/file-list'),
    Tech = require('../../../techs/bh-bundle'),
    bhCoreFilename = require.resolve('bh/lib/bh.js'),
    htmlFilename = path.join(__dirname, '..', '..', 'fixtures', 'browser--global.html'),
    mochaFilename = require.resolve('mocha/mocha.js'),
    chaiFilename = require.resolve('chai/chai.js'),
    runServer = require('../../lib/run-server');

describe('bh-bundle --browser --global-scope', function () {
    afterEach(function () {
        mock.restore();
    });

    it('compiled files should works on client-side', function () {
        var test = generateTest({ block: 'block' }, '<a class="block"></a>');

        return runTest(test);
    });

    describe('mimic', function () {
        it('mimic as a string', function () {
            var test = [
                    'chai.should();',
                    'describe("bh-client", function () {',
                        'it("autogenerated test", function () {',
                            'BEMHTML.apply({ block: "block" }).should.equal(\'<a class="block"></a>\');',
                        '})',
                    '})'
                ].join('\n'),
                options = {
                    mimic: 'BEMHTML'
                };

           return runTest(test, options);
        });

        it('mimic to different template engines', function () {
            var test = [
                    'chai.should();',
                    'describe("bh-client", function () {',
                        'it("autogenerated test", function () {',
                            'BEMHTML.apply({ block: "block" }).should.equal(\'<a class="block"></a>\');',
                            'render.apply({ block: "block" }).should.equal(\'<a class="block"></a>\');',
                        '})',
                    '})'
                ].join('\n'),
                options = {
                    mimic: ['BEMHTML', 'render']
                };

           return runTest(test, options);
        });
    });

    it('dependencies', function () {
        var test = generateTest({ block: 'block' }, '<div class="block">^_^</div>'),
            options = {
                dependencies: { test: '"^_^"' }
            },
            template = 'bh.match("block", function(ctx) { ctx.content(bh.lib.test); });';

       return runTest(test, options, template);
    });
});

function bhWrap(str) {
    return 'module.exports = function(bh) {' + str + '};';
}

function runTest(testContent, options, template) {
    var bhTemplate = bhWrap(template || 'bh.match("block", function(ctx) { ctx.tag("a"); });'),
        bundle,
        fileList,

        scheme = {
            blocks: {
                'block.bh.js': bhTemplate
            },
            bundle: {},
            'index.html': fs.readFileSync(htmlFilename, 'utf-8'),
            'test.js': testContent,
            'mocha.js': fs.readFileSync(mochaFilename, 'utf-8'),
            'chai.js': fs.readFileSync(chaiFilename, 'utf-8')
        };

    if (options && options.bhFile) {
        scheme['bh.js'] = options.bhFile;
        options.bhFile = 'bh.js';
    }

    scheme[bhCoreFilename] = fs.readFileSync(bhCoreFilename, 'utf-8');

    mock(scheme);

    bundle = new TestNode('bundle');
    fileList = new FileList();
    fileList.loadFromDirSync('blocks');
    bundle.provideTechData('?.files', fileList);

    return bundle.runTechAndGetContent(Tech, options)
        .spread(function (bh) {
            // TODO: удалить, когда пофиксится https://github.com/enb-make/enb/issues/224
            fs.writeFileSync('bundle/bundle.bh.js', bh);

            return runServer(3000);
        });
}

function generateTest(json, expected) {
    expected = expected.replace(/'/g, '\\\'');

    return [
        'chai.should();',
        'describe("bh-client", function () {',
            'it("autogenerated test", function () {',
                'bh.apply(' + JSON.stringify(json) + ').should.equal(\'' + expected + '\');',
            '})',
        '})'
    ].join('\n');
}
